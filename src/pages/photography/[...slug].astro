---
import { useSanityClient } from 'astro-sanity';
import { urlForImage } from '../../utilities/sanityImage.js';

import "bigger-picture/css";

import Layout from "../../layouts/Layout.astro";

const { slug } = Astro.params;

const data = await useSanityClient().fetch(`
*[_type=='photography' && slug.current == '${slug}'][0] {
	...
}
`);

if (!data) return Astro.redirect("/404");


const { images } = data;
// console.log(images)
// const { data } = Astro.props;
// const images = [...photography.images]
---

<style is:global>
  .bp-img {
    display: flex;
    align-items: center;
    background-image: none!important;
    justify-content: center;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important;
    transform: none !important;
  }
  .bp-img img, .bp-img div {
    height: auto;
    object-fit: contain;
    top: 50%;
    transform: translateY(-50%);
    object-position: center;
    max-height: 80vmin;
  }
  @media (orientation: portrait){
    .bp-img img, .bp-img div {
      max-width: 80vw;
      max-height: fit-content;
      margin: 0 auto;
      left: 0;
      right: 0;
    }
  }
</style>

<style>
  #images {
    column-gap: 3px;
  }
</style>

<Layout>
  <section class="pb-6 md_min:pb-24">
      <div class="container text-center">
				<h1 class="pointer-events-none bottom-12 left-6 headline-sm md:mb-5 md_min:fixed md_min:z-20 md_min:text-[16vw] md_min:block md_min:w-full md_min:text-left md_min:before:flex md_min:before:h-[120%] md_min:before:w-full md_min:before:absolute md_min:before:-z-1 md_min:before:-bottom-1/4 md_min:before:left-0 md_min:before:bg-gradient-to-t md_min:before:from-black md_min:before:to-transparent">{data.title}.</h1>
        <div id="images" class="columns-3 md:columns-2">
          {images.map(img => {
            return (
            <a
              href={urlForImage(img.asset).format('webp').maxWidth(800).quality(80).url()}
              class="block mb-[3px]"
              data-img={`${urlForImage(img.asset).format('webp').maxWidth(800).quality(80).url()} 479w,
                    ${urlForImage(img.asset).format('webp').maxWidth(1200).quality(80).url()} 768w,
                    ${urlForImage(img.asset).format('webp').maxWidth(1920).quality(80).url()} 1200w`}
              data-thumb={urlForImage(img.asset).format('webp').maxWidth(800).quality(80).url()}
              data-height="1920"
              data-width="1080"
              data-alt={img.alt}
              >
              <picture>
                <source
                  srcset={urlForImage(img.asset).format('webp').quality(80).url()}
                  type="image/webp"
                />
                <img
                    src={urlForImage(img.asset).maxWidth(800).quality(80).url()}
                    width="1920"
                    width="1080"
                    alt={img.alt}
                    srcset={`${urlForImage(img.asset).maxWidth(800).quality(80).url()} 479w,
                    ${urlForImage(img.asset).maxWidth(1200).quality(80).url()} 768w,
                    ${urlForImage(img.asset).maxWidth(1920).quality(80).url()} 1200w`}                    
                    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 1400px, 1920px"                    
                />
              </picture>                    
            </a>
            )
          })}
        </div>        
      </div>
  </section>       
</Layout>

<script>
  import BiggerPicture from "bigger-picture";
  //bigger picture
  // initialize BiggerPicture
  const bp = BiggerPicture({
    target: document.body
  });

  // grab image links
  const imageLinks = document.querySelectorAll("#images > a");

  // add click listener to open BiggerPicture
  for (let link of imageLinks) {
    link.addEventListener("click", openGallery);
  }

  // open BiggerPicture
  function openGallery(e) {
    e.preventDefault();
    bp.open({
      items: imageLinks,
      el: e.currentTarget
    });
  }  
</script>